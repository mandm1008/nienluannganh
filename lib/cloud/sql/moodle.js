import { connectGCSQL, createConfig } from './connect';

/**
 * T·∫°o database n·∫øu ch∆∞a t·ªìn t·∫°i
 * @param {string} dbName - T√™n database c·∫ßn t·∫°o
 * @returns {Promise<void>}
 */
export async function createDatabase(dbName) {
  const dbUser = process.env.GCSQL_USER;

  try {
    const connection = await connectGCSQL(); // K·∫øt n·ªëi ƒë·∫øn MySQL
    const createDatabaseQuery = `CREATE DATABASE IF NOT EXISTS \`${dbName}\``;

    await connection.query(createDatabaseQuery);
    console.log(`‚úÖ Database "${dbName}" created successfully`);

    const grantPrivilegesQuery = `
      GRANT ALL PRIVILEGES ON \`${dbName}\`.* TO '${dbUser}'@'%';
    `;
    await connection.query(grantPrivilegesQuery);
    await connection.query(`FLUSH PRIVILEGES;`);

    await connection.end(); // ƒê√≥ng k·∫øt n·ªëi sau khi t·∫°o xong
  } catch (error) {
    console.error('‚ùå Error creating database:', error);
  }
}

/**
 *
 * @param {number} quizId
 * @param {string} dbName
 * @param {string?} source
 */
export async function initDatabase(
  quizId,
  dbName,
  source = process.env.GCSQL_DB
) {
  const sourceHost = process.env.GCSQL_HOST || 'localhost';
  const sourceUser = process.env.GCSQL_USER || 'root';
  const sourcePass = process.env.GCSQL_PASS || '';
  const sourceDB = source;

  const targetHost =
    process.env.PUB_GCSQL_HOST || process.env.GCSQL_HOST || 'localhost';
  const targetUser =
    process.env.PUB_GCSQL_USER || process.env.GCSQL_USER || 'root';
  const targetPass = process.env.PUB_GCSQL_PASS || process.env.GCSQL_PASS || '';
  const targetDB = dbName;

  try {
    // Connect Source DB
    const sourceConnection = await connectGCSQL(
      createConfig(sourceHost, sourceUser, sourcePass, sourceDB)
    );

    // T·∫°o database n·∫øu ch∆∞a t·ªìn t·∫°i
    await createDatabase(targetDB);

    // Connect Target DB
    const targetConnection = await connectGCSQL(
      createConfig(targetHost, targetUser, targetPass, targetDB)
    );

    // Sao ch√©p c·∫•u tr√∫c b·∫£ng
    await copyTables(sourceDB, targetDB, sourceConnection, targetConnection);

    // Sao ch√©p d·ªØ li·ªáu
    // await copyQuiz(
    //   quizId,
    //   sourceDB,
    //   targetDB,
    //   sourceConnection,
    //   targetConnection
    // );
    await copyData(sourceDB, targetDB, sourceConnection, targetConnection);

    // ƒê√≥ng k·∫øt n·ªëi
    await sourceConnection.end();
    await targetConnection.end();

    console.log(
      `ÔøΩÔøΩ Sao ch√©p d·ªØ li·ªáu t·ª´ ${sourceDB} sang ${targetDB} th√†nh c√¥ng!`
    );
  } catch (error) {
    console.error('ÔøΩÔøΩ Error initializing database:', error);
  }
}

/**
 *
 * @param {string} sourceDB
 * @param {string} targetDB
 * @param {Connection} sourceConn
 * @param {Connection} targetConn
 * Copy structure from sourceDB to targetDB
 */
async function copyTables(sourceDB, targetDB, sourceConn, targetConn) {
  console.log(
    `üîÑ ƒêang sao ch√©p c·∫•u tr√∫c b·∫£ng t·ª´ ${sourceDB} sang ${targetDB}...`
  );

  // L·∫•y danh s√°ch c√°c b·∫£ng t·ª´ sourceDB
  const [tables] = await sourceConn.query(
    `SELECT table_name FROM information_schema.tables WHERE table_schema = ?;`,
    [sourceDB]
  );

  for (const table of tables) {
    const tableName = table.TABLE_NAME;
    console.log(`üìå ƒêang t·∫°o b·∫£ng: ${tableName}`);

    // T·∫°o b·∫£ng trong targetDB
    await targetConn.query(
      `CREATE TABLE \`${targetDB}\`.\`${tableName}\` LIKE \`${sourceDB}\`.\`${tableName}\`;`
    );
  }

  console.log('‚úÖ Ho√†n t·∫•t sao ch√©p c·∫•u tr√∫c b·∫£ng!');
}

/**
 *
 * @param {string} sourceDB
 * @param {string} targetDB
 * @param {Connection} connection
 *
 * Copy data from source db to target db
 */
async function copyData(
  sourceDB,
  targetDB,
  sourceConnection,
  targetConnection
) {
  console.log(`üîÑ ƒêang sao ch√©p d·ªØ li·ªáu t·ª´ ${sourceDB} sang ${targetDB}...`);

  try {
    // L·∫•y danh s√°ch c√°c b·∫£ng trong sourceDB
    const [tables] = await sourceConnection.query(
      `SELECT table_name FROM information_schema.tables WHERE table_schema = ?;`,
      [sourceDB]
    );

    for (const table of tables) {
      const tableName = table.TABLE_NAME;
      console.log(`üìå ƒêang sao ch√©p d·ªØ li·ªáu: ${tableName}`);

      // L·∫•y d·ªØ li·ªáu t·ª´ sourceDB
      const [rows] = await sourceConnection.query(
        `SELECT * FROM \`${sourceDB}\`.\`${tableName}\`;`
      );

      if (rows.length > 0) {
        const columns = Object.keys(rows[0])
          .map((col) => `\`${col}\``)
          .join(', ');
        const values = rows
          .map(
            (row) =>
              `(${Object.values(row)
                .map((val) => targetConnection.escape(val))
                .join(', ')})`
          )
          .join(', ');

        // Ch√®n d·ªØ li·ªáu v√†o targetDB
        await targetConnection.query(
          `INSERT INTO \`${targetDB}\`.\`${tableName}\` (${columns}) VALUES ${values};`
        );
      }
    }

    console.log('‚úÖ Ho√†n t·∫•t sao ch√©p d·ªØ li·ªáu!');
  } catch (error) {
    console.error('‚ùå L·ªói khi sao ch√©p d·ªØ li·ªáu:', error);
  }
}

/**
 *
 * @param {number} quizId
 * @param {string} sourceDB
 * @param {string} targetDB
 * @param {Connection} sourceConn
 * @param {Connection} targetConn
 *
 * @returns {Promise<boolean>}
 * @description Copy quiz from source db to target db
 */
async function copyQuiz(quizId, sourceDB, targetDB, connection) {
  try {
    console.log(
      `üîÑ B·∫Øt ƒë·∫ßu sao ch√©p quiz ID: ${quizId} t·ª´ ${sourceDB} sang ${targetDB}...`
    );

    // 1Ô∏è‚É£ Sao ch√©p th√¥ng tin Quiz
    console.log('üìå Sao ch√©p quiz...');
    await connection.query(
      `INSERT INTO \`${targetDB}\`.mdl_quiz 
       SELECT * FROM \`${sourceDB}\`.mdl_quiz WHERE id = ?;`,
      [quizId]
    );

    // 2Ô∏è‚É£ L·∫•y ID kh√≥a h·ªçc ch·ª©a quiz
    const [quizInfo] = await connection.query(
      `SELECT course FROM \`${sourceDB}\`.mdl_quiz WHERE id = ?;`,
      [quizId]
    );
    if (quizInfo.length === 0) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y quiz.');
      return false;
    }
    const courseId = quizInfo[0].course;

    // 3Ô∏è‚É£ Sao ch√©p kh√≥a h·ªçc
    console.log('üìå Sao ch√©p kh√≥a h·ªçc...');
    await connection.query(
      `INSERT INTO \`${targetDB}\`.mdl_course 
       SELECT * FROM \`${sourceDB}\`.mdl_course WHERE id = ?;`,
      [courseId]
    );

    // 4Ô∏è‚É£ Sao ch√©p Course Modules
    console.log('üìå Sao ch√©p course_modules...');
    await connection.query(
      `INSERT INTO \`${targetDB}\`.mdl_course_modules 
       SELECT * FROM \`${sourceDB}\`.mdl_course_modules 
       WHERE instance = ? AND module = (SELECT id FROM \`${sourceDB}\`.mdl_modules);`,
      [quizId]
    );

    // 5Ô∏è‚É£ Sao ch√©p Context (qu·∫£n l√Ω quy·ªÅn)
    console.log('üìå Sao ch√©p context...');
    await connection.query(
      `INSERT INTO \`${targetDB}\`.mdl_context 
       SELECT * FROM \`${sourceDB}\`.mdl_context WHERE instanceid = ? AND contextlevel = 50;`,
      [courseId]
    );

    // 6Ô∏è‚É£ Sao ch√©p C√¢u h·ªèi (Questions)
    console.log('üìå Sao ch√©p c√¢u h·ªèi c·ªßa quiz...');
    await connection.query(
      `INSERT INTO \`${targetDB}\`.mdl_question 
       SELECT * FROM \`${sourceDB}\`.mdl_question 
       WHERE id IN (SELECT questionid FROM \`${sourceDB}\`.mdl_quiz_slots WHERE quizid = ?);`,
      [quizId]
    );

    // 7Ô∏è‚É£ Sao ch√©p Quiz Slots (li√™n k·∫øt c√¢u h·ªèi v·ªõi quiz)
    console.log('üìå Sao ch√©p quiz_slots...');
    await connection.query(
      `INSERT INTO \`${targetDB}\`.mdl_quiz_slots 
       SELECT * FROM \`${sourceDB}\`.mdl_quiz_slots WHERE quizid = ?;`,
      [quizId]
    );

    // 8Ô∏è‚É£ Sao ch√©p C√¢u tr·∫£ l·ªùi (Question Answers)
    console.log('üìå Sao ch√©p c√¢u tr·∫£ l·ªùi...');
    await connection.query(
      `INSERT INTO \`${targetDB}\`.mdl_question_answers 
       SELECT * FROM \`${sourceDB}\`.mdl_question_answers 
       WHERE question IN (SELECT id FROM \`${sourceDB}\`.mdl_question 
                          WHERE id IN (SELECT questionid FROM \`${sourceDB}\`.mdl_quiz_slots WHERE quizid = ?));`,
      [quizId]
    );

    // 9Ô∏è‚É£ Sao ch√©p Quiz Attempts (k·∫øt qu·∫£ l√†m b√†i)
    console.log('üìå Sao ch√©p k·∫øt qu·∫£ l√†m b√†i...');
    await connection.query(
      `INSERT INTO \`${targetDB}\`.mdl_quiz_attempts 
       SELECT * FROM \`${sourceDB}\`.mdl_quiz_attempts WHERE quiz = ?;`,
      [quizId]
    );

    // üîü Sao ch√©p Events (l·ªãch s·ª± ki·ªán c·ªßa quiz)
    console.log('üìå Sao ch√©p s·ª± ki·ªán l·ªãch...');
    await connection.query(
      `INSERT INTO \`${targetDB}\`.mdl_event 
       SELECT * FROM \`${sourceDB}\`.mdl_event 
       WHERE instance = ? AND modulename = 'quiz';`,
      [quizId]
    );

    // 1Ô∏è‚É£1Ô∏è‚É£ Sao ch√©p Users (t·∫•t c·∫£ ng∆∞·ªùi d√πng trong kh√≥a h·ªçc)
    console.log('üìå Sao ch√©p t·∫•t c·∫£ user trong kh√≥a h·ªçc...');
    await connection.query(
      `INSERT INTO \`${targetDB}\`.mdl_user 
       SELECT * FROM \`${sourceDB}\`.mdl_user 
       WHERE id IN (SELECT userid FROM \`${sourceDB}\`.mdl_role_assignments 
                    WHERE contextid IN (SELECT id FROM \`${sourceDB}\`.mdl_context WHERE instanceid = ? AND contextlevel = 50));`,
      [courseId]
    );

    console.log('‚úÖ Ho√†n t·∫•t sao ch√©p quiz v√† t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan!');
    return true;
  } catch (error) {
    console.error('‚ùå L·ªói khi sao ch√©p quiz:', error);
    return false;
  }
}
